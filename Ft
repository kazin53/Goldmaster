<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>Lobby 3D com Personagem Customizado</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    
    <link href="https://fonts.googleapis.com/css2?family=Cinzel+Decorative&family=IM+Fell+Great+Primer+SC&display=swap" rel="stylesheet">
    <style>
        body { 
            /* Estilos básicos de tela preta */
            margin: 0; 
            overflow: hidden; 
            background: #000; 
            font-family: 'IM Fell Great Primer SC', serif; 
            color: #eee; 
            height: 100vh;
        }
        
        /* Reintroduz o canvas para renderização 3D */
        canvas { 
            display: block; 
            position: absolute;
            top: 0;
            left: 0;
            z-index: 1; 
        }

        /* --- UI Geral --- */
        
        .ui-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 10;
            pointer-events: none; 
        }

        .ui-top-left {
            position: absolute;
            top: 20px;
            left: 20px;
            display: flex;
            flex-direction: column;
            gap: 12px;
            pointer-events: auto; 
        }

        .ui-bottom-right {
            position: absolute;
            bottom: 30px;
            right: 30px;
            pointer-events: auto; 
            display: flex;
            align-items: flex-end; 
            gap: 10px; 
            flex-direction: column; 
        }
        
        #active-world-display {
            font-family: 'IM Fell Great Primer SC', serif;
            color: #FFD700;
            background-color: rgba(0, 0, 0, 0.6); 
            padding: 8px 15px;
            border: 2px solid #5a3c26; 
            font-size: 16px;
            text-align: right;
            margin-bottom: 5px; 
            min-width: 200px;
            box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.7);
        }
        
        .button-group {
            display: flex;
            gap: 10px;
        }
        
        /* --- Botões Base --- */
        .lobby-button {
            background-image: url(); 
            background-size: cover;
            background-color: rgba(0, 0, 0, 0.6); 
            background-blend-mode: soft-light; 
            color: #e1eb34; 
            border: 3px solid transparent; 
            padding: 5px 20px;
            font-size: 15px; 
            font-weight: bold;
            cursor: pointer;
            text-transform: uppercase;
            transition: all 0.2s ease;
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.7); 
            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.9); 
            min-width: 100px;
            text-align: left;
            border-radius: 20px; 
        }

        .lobby-button:hover {
            background-color: rgba(0, 0, 0, 0.5); 
            background-blend-mode: overlay; 
            color: #ffffff;
            box-shadow: 0 0 10px rgba(255, 215, 0, 0.8), 0 0 15px rgba(255, 215, 0, 0.5); 
        }
        
        #worlds-button {
            background-size: cover;
            background-color: rgba(0, 0, 0, 0.7); 
            background-blend-mode: soft-light;
            color: #ccc; 
            font-size: 15px;
            height: 47px;
            width: 30;
            min-width: auto; 
            text-align: center;
            border-radius: 20px;
        }

        #go-button {
            background-size: cover;
            background-color: rgba(0, 0, 0, 0.9); 
            background-blend-mode: soft-light;
            padding: 20px 40px;
            font-size: 15px; 
            font-family: 'Cinzel Decorative', cursive; 
            color: #FFD700; 
            text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.9), 0 0 10px rgba(255, 215, 0, 0.5); 
            box-shadow: 0 0 30px rgba(255, 215, 0, 0.8), inset 0 0 15px rgba(255, 215, 0, 0.3); 
            pointer-events: none; 
            opacity: 0.6;
            cursor: not-allowed;
        }

        #go-button.active {
            pointer-events: auto; 
            opacity: 1;
            cursor: pointer;
        }

        /* --- MENU DE CONFIGURAÇÕES (NOVO) --- */
        #settings-group {
            position: relative; 
        }

        #settings-menu {
            position: absolute;
            top: 0; 
            left: 100%; 
            transform: translateX(10px); 
            
            display: none; 
            flex-direction: column;
            width: 250px;
            padding: 15px;
            
            /* Estilo de painel escuro e sólido */
            background-color: rgba(20, 20, 20, 0.95);
            border: 5px solid #4a4a4a; 
            border-radius: 5px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.9); 
            
            pointer-events: auto;
            z-index: 11; 
        }

        #settings-menu.visible {
            display: flex;
        }

        .menu-header {
            color: #FFD700;
            font-size: 1.2em;
            margin-bottom: 10px;
            padding-bottom: 5px;
            border-bottom: 1px solid #4a4a4a;
            text-align: center;
            font-family: 'Cinzel Decorative', cursive;
        }

        .sensitivity-item {
            display: flex;
            flex-direction: column;
            gap: 5px;
            padding: 8px 0;
        }

        .sensitivity-item label {
            font-size: 0.9em;
            color: #ccc;
        }

        #sensitivity-range {
            width: 100%;
        }

        #sensitivity-value {
            text-align: right;
            font-size: 1.1em;
            color: #FFD700;
        }
        
        /* --- Modal de Seleção de Mundos --- */
        #worlds-menu {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7); 
            z-index: 20; 
            display: none; 
            justify-content: center;
            align-items: center;
            pointer-events: auto; 
        }

        .worlds-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr); 
            gap: 25px; 
            max-width: 950px; 
            padding: 30px;
            background-color: rgba(20, 20, 20, 0.95); 
            background-blend-mode: multiply;
            border: 5px solid #4a4a4a; 
            border-radius: 5px; 
            box-shadow: 0 0 40px rgba(0, 0, 0, 0.9); 
        }
        
        .world-card {
            width: 250px;
            height: 200px;
            border: 3px solid transparent; 
            cursor: pointer;
            transition: transform 0.2s, border-image 0.2s, box-shadow 0.2s;
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
            align-items: flex-start;
            padding: 10px;
            box-sizing: border-box;
            background-size: cover; 
            background-position: center;
            background-repeat: no-repeat;
            box-shadow: 3px 3px 8px rgba(0, 0, 0, 0.7); 
            position: relative; 
        }
        
        .world-card.selected {
            /* Imagem de borda de pedra/metal para seleção */
            border-image: url('https://i.imgur.com/d9j8C1Y.png') 10 / 10px stretch; 
            box-shadow: 0 0 15px rgba(0, 255, 255, 0.8); 
            transform: scale(1.02);
        }
        
        #world-1 { background-image: linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), url('mundo01.png'); } 
        #world-2 { background-image: linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), url('mundo02.png'); }
        #world-3 { background-image: linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), url('mundo03.png'); }
        #world-4 { background-image: linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), url('mundo04.png'); }
        #world-5 { background-image: linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), url('mundo05.png'); }
        #world-6 { background-image: linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), url('mundo06.png'); }

        .world-card:hover {
            transform: scale(1.04);
            box-shadow: 0 0 15px rgba(255, 215, 0, 0.8), 0 0 10px rgba(255, 215, 0, 0.5); 
        }

        .world-name {
            background-color: rgba(0, 0, 0, 0.7);
            color: #f0e68c; 
            padding: 8px 12px;
            font-size: 18px;
            font-weight: bold;
            border-radius: 3px;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
            position: absolute; 
            bottom: 10px;
            left: 10px;
            font-family: 'Cinzel Decorative', cursive;
        }
        
        #close-worlds-menu {
            position: absolute;
            top: 15px;
            right: 15px;
            background: none;
            color: #ccc;
            border: 2px solid #ccc;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            font-size: 18px;
            cursor: pointer;
            line-height: 1; 
            text-align: center;
            transition: all 0.2s;
        }
        
        #close-worlds-menu:hover {
            color: #fff;
            border-color: #fff;
            background-color: rgba(255, 255, 255, 0.1);
            transform: rotate(90deg);
        }
    </style>
</head>
<body>
    
    <canvas id="bg-canvas"></canvas>

    <div class="ui-container">
        <div class="ui-top-left">
            <div id="settings-group">
                <button class="lobby-button" id="settings-button">MENU</button>
                <div id="settings-menu" class="sub-menu">
                    <div class="menu-item menu-header">Ajustes</div>
                    <div class="sensitivity-item">
                        <label for="sensitivity-range">Sensibilidade da Câmera:</label>
                        <input type="range" id="sensitivity-range" min="0.1" max="5.0" step="0.1" value="1.0">
                        <span id="sensitivity-value">1.0</span>
                    </div>
                    </div>
            </div>
            <button class="lobby-button">Perfil</button>
            <button class="lobby-button">Amigos</button>
            <button class="lobby-button">Loja</button>
            <button class="lobby-button">Opções</button>
        </div>

        <div class="ui-bottom-right">
            <div id="active-world-display">Nenhum mundo selecionado</div>
            
            <div class="button-group">
                <button class="lobby-button" id="worlds-button">MUNDOS</button>
                <button class="lobby-button" id="go-button">GO! WORLD</button> 
            </div>
        </div>
    </div>
    
    <div id="worlds-menu">
        <div class="worlds-grid">
            <div class="world-card" id="world-1" data-world-id="1">
                <span class="world-name">Floresta Mística</span>
            </div>
            <div class="world-card" id="world-2" data-world-id="2">
                <span class="world-name">Cidade Cyber</span>
            </div>
            <div class="world-card" id="world-3" data-world-id="3">
                <span class="world-name">Deserto Antigo</span>
            </div>
            <div class="world-card" id="world-4" data-world-id="4">
                <span class="world-name">Reino de Gelo</span>
            </div>
            <div class="world-card" id="world-5" data-world-id="5">
                <span class="world-name">Ilha Vulcânica</span>
            </div>
            <div class="world-card" id="world-6" data-world-id="6">
                <span class="world-name">O Espaço</span>
            </div>
        </div>
        <button class="close-button" id="close-worlds-menu">X</button>
    </div>

    <script>
        let scene, camera, renderer, controls;
        let player; 
        let leftArmGroup, rightArmGroup, leftLegGroup, rightLegGroup; 
        let clock = new THREE.Clock(); 
        
        let selectedWorldId = null; 
        let selectedWorldName = "Nenhum mundo selecionado";


        init();
        animate(); 

        function init() {
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x000000); 

            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(2, 3, 5); 

            renderer = new THREE.WebGLRenderer({
                canvas: document.getElementById('bg-canvas'),
                antialias: true
            });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.shadowMap.enabled = true;
            
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.6); 
            scene.add(ambientLight);

            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight.position.set(5, 10, 7.5); 
            directionalLight.castShadow = true;
            directionalLight.shadow.mapSize.width = 1024;
            directionalLight.shadow.mapSize.height = 1024;
            directionalLight.shadow.camera.near = 0.5;
            directionalLight.shadow.camera.far = 50;
            scene.add(directionalLight);

            const floor = new THREE.Mesh(
                new THREE.PlaneGeometry(10, 10),
                new THREE.MeshStandardMaterial({ color: 0x000000 })
            );
            floor.rotation.x = -Math.PI / 2;
            floor.receiveShadow = true;
            scene.add(floor);

            createRobloxCharacter();

            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enablePan = false;
            controls.minDistance = 2;
            controls.maxDistance = 10;
            controls.target.set(0, 1.5, 0); 
            // Define a sensibilidade inicial da câmera (padrão Three.js é 1.0)
            controls.rotateSpeed = 1.0; 
            controls.update();

            createUIListeners(); 
            createSettingsListeners(); // NOVO: Inicializa os listeners de configurações
            setActiveWorld(1, 'Floresta Mística'); 
        }

        /**
         * FUNÇÃO DO PERSONAGEM 3D 
         */
        function createRobloxCharacter() {
            player = new THREE.Group();
            // Posição Y ajustada para 2.85 (para os pés ficarem em Y=0)
            player.position.set(0, 2.85, 0); 
            scene.add(player);

            const skinMaterial = new THREE.MeshLambertMaterial({ color: 0xF1C27D });
            const shirtMaterial = new THREE.MeshLambertMaterial({ color: 0x4444aa });
            const pantsMaterial = new THREE.MeshLambertMaterial({ color: 0x333333 });
            const hairMaterial = new THREE.MeshLambertMaterial({ color: 0x2B1B0E });
            const eyeMaterial = new THREE.MeshLambertMaterial({ color: 0x000000 });
            const mouthMaterial = new THREE.MeshLambertMaterial({ color: 0xAA0000 });

            // Cabeça
            const headGeometry = new THREE.BoxGeometry(0.8, 0.8, 0.8);
            const head = new THREE.Mesh(headGeometry, skinMaterial);
            head.position.set(0, 0.3, 0); 
            head.castShadow = true;
            player.add(head);

            // Cabelo
            const hairGeometry = new THREE.BoxGeometry(0.85, 0.4, 0.85);
            const hair = new THREE.Mesh(hairGeometry, hairMaterial);
            hair.position.set(0, 0.65, 0);
            hair.castShadow = true;
            player.add(hair);

            // Mechas de cabelo
            const sideHair1 = new THREE.Mesh(new THREE.BoxGeometry(0.2, 0.3, 0.2), hairMaterial);
            sideHair1.position.set(-0.45, 0.5, 0.2);
            player.add(sideHair1);

            const sideHair2 = new THREE.Mesh(new THREE.BoxGeometry(0.2, 0.3, 0.2), hairMaterial);
            sideHair2.position.set(0.45, 0.5, 0.2);
            player.add(sideHair2);

            // Olhos
            const eyeGeometry = new THREE.BoxGeometry(0.12, 0.12, 0.04);
            const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial);
            leftEye.position.set(-0.18, 0.32, 0.41);
            player.add(leftEye);

            const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial);
            rightEye.position.set(0.18, 0.32, 0.41);
            player.add(rightEye);

            // Boca
            const mouth = new THREE.Mesh(new THREE.BoxGeometry(0.25, 0.08, 0.03), mouthMaterial);
            mouth.position.set(0, 0.08, 0.41);
            player.add(mouth);

            // Corpo
            const bodyGeometry = new THREE.BoxGeometry(1.1, 1.3, 0.5);
            const body = new THREE.Mesh(bodyGeometry, shirtMaterial);
            body.position.set(0, -0.6, 0);
            body.castShadow = true;
            player.add(body);

            // Detalhes do peito
            const chestDetail = new THREE.Mesh(new THREE.BoxGeometry(0.8, 0.3, 0.52), new THREE.MeshLambertMaterial({ color: 0x3333aa }));
            chestDetail.position.set(0, -0.4, 0);
            player.add(chestDetail);

            // Braços
            const armGeometry = new THREE.BoxGeometry(0.35, 1.1, 0.35);
            const armMaterial = new THREE.MeshLambertMaterial({ color: 0x666666 });

            leftArmGroup = new THREE.Group();
            const leftArm = new THREE.Mesh(armGeometry, armMaterial);
            leftArm.position.y = -0.55;
            leftArm.castShadow = true;

            const leftShoulder = new THREE.Mesh(new THREE.BoxGeometry(0.4, 0.3, 0.4), armMaterial);
            leftShoulder.position.set(0, 0.1, 0);
            leftArmGroup.add(leftShoulder);

            const leftForearm = new THREE.Mesh(new THREE.BoxGeometry(0.3, 0.5, 0.3), skinMaterial);
            leftForearm.position.set(0, -0.8, 0);
            leftArmGroup.add(leftForearm);

            leftArmGroup.add(leftArm);
            leftArmGroup.position.set(-0.75, 0.1, 0);
            player.add(leftArmGroup);

            rightArmGroup = new THREE.Group();
            const rightArm = new THREE.Mesh(armGeometry, armMaterial);
            rightArm.position.y = -0.55;
            rightArm.castShadow = true;

            const rightShoulder = new THREE.Mesh(new THREE.BoxGeometry(0.4, 0.3, 0.4), armMaterial);
            rightShoulder.position.set(0, 0.1, 0);
            rightArmGroup.add(rightShoulder);

            const rightForearm = new THREE.Mesh(new THREE.BoxGeometry(0.3, 0.5, 0.3), skinMaterial);
            rightForearm.position.set(0, -0.8, 0);
            rightArmGroup.add(rightForearm);

            rightArmGroup.add(rightArm);
            rightArmGroup.position.set(0.75, 0.1, 0);
            player.add(rightArmGroup);

            // Pernas
            const legGeometry = new THREE.BoxGeometry(0.45, 1.4, 0.45);

            leftLegGroup = new THREE.Group();
            const leftLeg = new THREE.Mesh(legGeometry, pantsMaterial);
            leftLeg.position.y = -0.7;

            const leftThigh = new THREE.Mesh(new THREE.BoxGeometry(0.5, 0.6, 0.5), pantsMaterial);
            leftThigh.position.set(0, -0.1, 0);
            leftLegGroup.add(leftThigh);

            const leftCalf = new THREE.Mesh(new THREE.BoxGeometry(0.4, 0.6, 0.4), pantsMaterial);
            leftCalf.position.set(0, -1.0, 0);
            leftLegGroup.add(leftCalf);

            const leftFoot = new THREE.Mesh(new THREE.BoxGeometry(0.35, 0.2, 0.6), new THREE.MeshLambertMaterial({ color: 0x222222 }));
            leftFoot.position.set(0, -1.5, 0.1);
            leftLegGroup.add(leftFoot);

            leftLegGroup.add(leftLeg);
            leftLegGroup.position.set(-0.3, -1.25, 0);
            player.add(leftLegGroup);

            rightLegGroup = new THREE.Group();
            const rightLeg = new THREE.Mesh(legGeometry, pantsMaterial);
            rightLeg.position.y = -0.7;

            const rightThigh = new THREE.Mesh(new THREE.BoxGeometry(0.5, 0.6, 0.5), pantsMaterial);
            rightThigh.position.set(0, -0.1, 0);
            rightLegGroup.add(rightThigh);

            const rightCalf = new THREE.Mesh(new THREE.BoxGeometry(0.4, 0.6, 0.4), pantsMaterial);
            rightCalf.position.set(0, -1.0, 0);
            rightLegGroup.add(rightCalf);

            const rightFoot = new THREE.Mesh(new THREE.BoxGeometry(0.35, 0.2, 0.6), new THREE.MeshLambertMaterial({ color: 0x222222 }));
            rightFoot.position.set(0, -1.5, 0.1);
            rightLegGroup.add(rightFoot);

            rightLegGroup.add(rightLeg);
            rightLegGroup.position.set(0.3, -1.25, 0);
            player.add(rightLegGroup);
        }

        function animate() {
            requestAnimationFrame(animate);

            const delta = clock.getDelta();
            const elapsedTime = clock.getElapsedTime();

            if (player) {
                // Animação de respiração (mantendo a base em 2.85)
                player.position.y = 2.85 + Math.sin(elapsedTime * 1.5) * 0.03; 

                // Animação de balanço de braço
                const swing = Math.sin(elapsedTime * 2.5) * 0.2; 
                if (leftArmGroup && rightArmGroup) {
                    leftArmGroup.rotation.x = swing;
                    rightArmGroup.rotation.x = -swing; 
                }
            }

            controls.update(delta);
            renderer.render(scene, camera);
        }
        
        // NOVO: Funções para o menu de configurações
        function createSettingsListeners() {
            const settingsButton = document.getElementById('settings-button');
            const settingsMenu = document.getElementById('settings-menu');
            const sensitivityRange = document.getElementById('sensitivity-range');
            const sensitivityValueSpan = document.getElementById('sensitivity-value');

            // Toggle menu on button click
            settingsButton.addEventListener('click', (e) => {
                e.stopPropagation();
                settingsMenu.classList.toggle('visible');
            });

            // Close menu when clicking outside
            document.addEventListener('click', (e) => {
                // Verifica se o clique não foi no menu nem no botão
                if (!settingsMenu.contains(e.target) && e.target !== settingsButton) {
                    settingsMenu.classList.remove('visible');
                }
            });

            // Sincroniza o slider com o valor inicial (1.0)
            sensitivityRange.value = controls.rotateSpeed; 
            sensitivityValueSpan.innerText = controls.rotateSpeed.toFixed(1);

            // Lógica de ajuste de sensibilidade da câmera
            sensitivityRange.addEventListener('input', (e) => {
                const newSensitivity = parseFloat(e.target.value);
                if (controls) {
                    controls.rotateSpeed = newSensitivity;
                }
                sensitivityValueSpan.innerText = newSensitivity.toFixed(1);
            });
        }


        function setActiveWorld(id, name) {
            selectedWorldId = id;
            selectedWorldName = name;
            
            document.getElementById('active-world-display').innerText = `Mundo Selecionado: ${name}`;
            
            const goButton = document.getElementById('go-button');
            goButton.classList.add('active');
            
            document.querySelectorAll('.world-card').forEach(card => {
                card.classList.remove('selected');
                if (card.getAttribute('data-world-id') == id) {
                    card.classList.add('selected');
                }
            });
        }

        function createUIListeners() {
            const worldsMenu = document.getElementById('worlds-menu');
            const goButton = document.getElementById('go-button');
            
            document.getElementById('worlds-button').addEventListener('click', (e) => {
                e.stopPropagation(); 
                worldsMenu.style.display = 'flex'; 
            });
            
            goButton.addEventListener('click', (e) => {
                e.stopPropagation(); 
                
                if (selectedWorldId) {
                    window.location.href = `car${selectedWorldId}.html`; 
                } else {
                    alert('Por favor, selecione um mundo antes de iniciar!');
                }
            });
            
            document.getElementById('close-worlds-menu').addEventListener('click', (e) => {
                e.stopPropagation();
                worldsMenu.style.display = 'none'; 
            });
            
            document.querySelectorAll('.world-card').forEach(card => {
                card.addEventListener('click', (e) => {
                    e.stopPropagation();
                    
                    const worldId = e.currentTarget.getAttribute('data-world-id');
                    const worldName = e.currentTarget.querySelector('.world-name').innerText;
                    
                    setActiveWorld(worldId, worldName);
                    
                    worldsMenu.style.display = 'none'; 
                });
            });
            
            worldsMenu.addEventListener('click', (event) => {
                if (event.target === worldsMenu) {
                    worldsMenu.style.display = 'none';
                }
            });
            
            window.addEventListener('resize', onWindowResize, false);
        }
        
        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        (function bloquearVoltarParaGames() {
          const ref = document.referrer; 

          const games = [
            "game1.html", "game2.html", "game3.html", "game4.html", "game5.html", "game6.html",
            "car1.html", "car2.html", "car3.html", "car4.html", "car5.html", "car6.html"
          ];

          if (ref && games.some(p => ref.includes(p))) {
            window.location.replace(window.location.href);
          }

          if (window.history && window.history.pushState) {
            history.pushState(null, null, window.location.href);
            window.addEventListener("popstate", () => {
              history.pushState(null, null, window.location.href);
            });
          }
        })();
    </script>
</body>
</html>
